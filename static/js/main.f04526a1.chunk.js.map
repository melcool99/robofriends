{"version":3,"sources":["components/Card.js","components/CardsList.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardsList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BF,GAAMG,IAAI,WAC5C,gCACE,6BAAKL,IACL,4BAAIC,WCeGK,EApBG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACE,cAAC,EAAD,CAEAR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,OAHbS,SCGHC,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKV,UAAU,MAAf,SACA,uBAAOA,UAAU,mCAAmCW,KAAK,SACzDC,YAAY,gBACZC,SAAYH,OCiCDI,E,kDAlCb,aAAe,IAAD,8BACZ,gBAYFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAZ1C,EAAKC,MAAQ,CACXhB,OAAQ,GACRK,YAAa,IAJH,E,qDAOd,WAAqB,IAAD,OAClBY,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKR,SAAS,CAAEb,OAAQqB,S,oBAO7C,WAAU,IAAD,OACDC,EAAiBC,KAAKP,MAAMhB,OAAOwB,QAAO,SAACxB,GAC/C,OAAOA,EAAOP,KACXgC,cACAC,SAAS,EAAKV,MAAMX,YAAYoB,kBAGrC,OACE,sBAAK7B,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAciB,KAAKZ,iBAC9B,cAAC,EAAD,CAAWX,OAAQsB,W,GA7BTK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f04526a1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../components/Card\";\r\n\r\nconst CardsList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user,i) => {\r\n          return (\r\n            <Card\r\n            key ={i}\r\n            id = {robots[i].id}\r\n            name = {robots[i].name}\r\n            email = {robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default CardsList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n    <input className='pa3 ba b--green bg-lightest-blue' type=\"search\" \r\n    placeholder='search robots'\r\n    onChange = {searchChange}\r\n    />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from \"react\";\r\nimport CardsList from \"../components/CardsList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"../containers/App\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robots) => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f2\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <CardsList robots={filteredRobots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}